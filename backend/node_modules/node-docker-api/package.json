{
  "_from": "node-docker-api",
  "_id": "node-docker-api@1.1.22",
  "_inBundle": false,
  "_integrity": "sha1-IwMn79MJpuxzAr8/QEq3YAQKWAY=",
  "_location": "/node-docker-api",
  "_phantomChildren": {
    "core-util-is": "1.0.2",
    "inherits": "2.0.3",
    "isarray": "0.0.1",
    "split-ca": "1.0.1",
    "through": "2.3.8"
  },
  "_requested": {
    "escapedName": "node-docker-api",
    "fetchSpec": "latest",
    "name": "node-docker-api",
    "raw": "node-docker-api",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/node-docker-api/-/node-docker-api-1.1.22.tgz",
  "_shasum": "230327efd309a6ec7302bf3f404ab760040a5806",
  "_spec": "node-docker-api",
  "_where": "/home/damyanov/Desktop/ora.jenkins/backend",
  "author": {
    "name": "AgustinCB"
  },
  "bugs": {
    "url": "https://github.com/AgustinCB/docker-api/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "docker-modem": "^0.3.1",
    "memorystream": "^0.3.1"
  },
  "deprecated": false,
  "description": "Docker Remote API driver for node",
  "devDependencies": {
    "@types/node": "^7.0.5",
    "ava": "^0.17.0",
    "brace-expansion": "^1.1.7",
    "chai": "^3.5.0",
    "jsdox": "^0.4.10",
    "marked": "0.3.9",
    "mocha": "^2.5.3",
    "mustache": "2.2.1",
    "nodemon": "^1.11.0",
    "tslint": "^4.4.2",
    "typedoc": "^0.6.0",
    "typescript": "^2.1.6"
  },
  "homepage": "https://github.com/AgustinCB/docker-api#readme",
  "keywords": [
    "api",
    "docker",
    "node"
  ],
  "license": "\tGPL-2.0",
  "main": "./lib/docker",
  "name": "node-docker-api",
  "optionalDependencies": {},
  "readme": "# docker-api\n[![travis-ci](https://travis-ci.org/AgustinCB/docker-api.png?branch=master)](https://travis-ci.org/AgustinCB/docker-api)\n\nDocker Remote API driver for node.js. It uses the same modem than [dockerode](https://github.com/apocas/dockerode), but the interface is promisified and with a different syntax.\n\nSupport for:\n\n* **streams**\n* **stream demux**\n* **entities**\n* **run**\n* **tests**\n* **promises**\n* **full es6 support**\n\nThe current status of the package is in beta state. This module covers the full [API reference](https://docs.docker.com/engine/api/v1.30), including experimental stuff such as plugins.\n\nCheck the [reference](https://agustincb.github.io/docker-api/) and the [tests](https://github.com/AgustinCB/docker-api/tree/master/test) for full examples.\n\n## Installation\n```console\n$ npm install node-docker-api\n```\n\n## Usage\n\nYou can find more into the [examples folder](https://github.com/AgustinCB/docker-api/tree/master/examples)\n\n### Create, start, stop, restart and remove a container\n\n``` js\n'use strict';\nconst {Docker} = require('node-docker-api');\n\nconst docker = new Docker({ socketPath: '/var/run/docker.sock' });\n\ndocker.container.create({\n  Image: 'ubuntu',\n  name: 'test'\n})\n  .then(container => container.start())\n  .then(container => container.stop())\n  .then(container => container.restart())\n  .then(container => container.delete({ force: true }))\n  .catch(error => console.log(error));\n```\n\n### List, inspect and top containers\n\n``` js\n'use strict';\nconst {Docker} = require('node-docker-api');\n\nconst docker = new Docker({ socketPath: '/var/run/docker.sock' });\n\n// List\ndocker.container.list()\n   // Inspect\n  .then(containers => containers[0].status())\n  .then(container => container.top())\n  .then(processes => console.log(processes))\n  .catch(error => console.log(error));\n```\n\n### List, inspect and stat containers\n\n``` js\n'use strict';\nconst {Docker} = require('node-docker-api');\n\nconst docker = new Docker({ socketPath: '/var/run/docker.sock' });\n\n// List\ndocker.container.list()\n   // Inspect\n  .then(containers => containers[0].status())\n  .then(container => container.stats())\n  .then(stats => {\n    stats.on('data', stat => console.log('Stats: ', stat.toString()))\n    stats.on('error', err => console.log('Error: ', err))\n  })\n  .catch(error => console.log(error));\n```\n\n### Get logs of a container\n\n```js\n'use strict';\nconst {Docker} = require('node-docker-api');\n\nconst docker = new Docker({ socketPath: '/var/run/docker.sock' });\nlet container;\n\ndocker.container.create({\n  Image: 'ubuntu',\n  name: 'test'\n})\n  .then(container => container.logs({\n    follow: true,\n    stdout: true,\n    stderr: true\n  }))\n  .then(stream => {\n    stream.on('data', info => console.log(info))\n    stream.on('error', err => console.log(err))\n  })\n  .catch(error => console.log(error));\n```\n\n### Export a container\n\n``` js\nconst {Docker} = require('node-docker-api');\nconst fs = require('fs');\n\nconst docker = new Docker({ socketPath: '/var/run/docker.sock' });\nlet container;\n\ndocker.container.create({\n  Image: 'ubuntu',\n  name: 'test'\n})\n  .then(container => container.start())\n  .then(container => container.export())\n  .then(content => {\n    const file = fs.createWriteStream(\"container.tar\");\n    file.end(content)\n  })\n  .catch(error => console.log(error));\n```\n\n### Manipulate file system in a container\n\n``` js\n'use strict';\nconst fs = require('fs');\nconst {Docker} = require('node-docker-api');\n\nconst promisifyStream = stream => new Promise((resolve, reject) => {\n  stream.on('data', data => console.log(data.toString()))\n  stream.on('end', resolve)\n  stream.on('error', reject)\n});\n\nconst docker = new Docker({ socketPath: '/var/run/docker.sock' });\nlet container;\n\ndocker.container.create({\n  Image: 'ubuntu',\n  Cmd: [ '/bin/bash', '-c', 'tail -f /var/log/dmesg' ],\n  name: 'test'\n})\n  .then(container => container.start())\n  .then(_container => {\n    container = _container\n    return _container.fs.put('./file.tar', {\n      path: 'root'\n    })\n  })\n  .then(stream => promisifyStream(stream))\n  .then(() => container.fs.get({ path: '/var/log/dmesg' }))\n  .then(stream => {\n    const file = fs.createWriteStream(\"file.jpg\");\n    stream.pipe(file);\n    return promisifyStream(stream);\n  })\n  .then(() => container.status())\n  .then(container => container.stop())\n  .catch(error => console.log(error));\n```\n\n### Execute commands and kill containers\n\n``` js\n'use strict';\nconst {Docker} = require('node-docker-api');\n\nconst promisifyStream = stream => new Promise((resolve, reject) => {\n  stream.on('data', data => console.log(data.toString()))\n  stream.on('end', resolve)\n  stream.on('error', reject)\n});\n\nconst docker = new Docker({ socketPath: '/var/run/docker.sock' });\nlet _container;\n\ndocker.container.create({\n  Image: 'ubuntu',\n  Cmd: [ '/bin/bash', '-c', 'tail -f /var/log/dmesg' ],\n  name: 'test'\n})\n  .then(container => container.start())\n  .then(container => {\n    _container = container\n    return container.exec.create({\n      AttachStdout: true,\n      AttachStderr: true,\n      Cmd: [ 'echo', 'test' ]\n    })\n  })\n  .then(exec => {\n    return exec.start({ Detach: false })\n  })\n  .then(stream => promisifyStream(stream))\n  .then(() => _container.kill())\n  .catch(error => console.log(error));\n```\n\n### Build, inspect and remove an image\n\n``` js\n'use strict';\nconst {Docker} = require('node-docker-api');\nconst tar = require('tar-fs');\n\nconst promisifyStream = stream => new Promise((resolve, reject) => {\n  stream.on('data', data => console.log(data.toString()))\n  stream.on('end', resolve)\n  stream.on('error', reject)\n});\n\nconst docker = new Docker({ socketPath: '/var/run/docker.sock' });\n\nvar tarStream = tar.pack('/path/to/Dockerfile')\ndocker.image.build(tarStream, {\n  t: 'testimg'\n})\n  .then(stream => promisifyStream(stream))\n  .then(() => docker.image.get('testimg').status())\n  .then(image => image.remove())\n  .catch(error => console.log(error));\n```\n\n### Pull and check history of an image\n\n``` js\n'use strict';\nconst {Docker} = require('node-docker-api');\n\nconst promisifyStream = (stream) => new Promise((resolve, reject) => {\n  stream.on('data', (d) => console.log(d.toString()))\n  stream.on('end', resolve)\n  stream.on('error', reject)\n})\n\nconst docker = new Docker({ socketPath: '/var/run/docker.sock' })\n\nreturn docker.image.create({}, { fromImage: 'ubuntu', tag: 'latest' })\n  .then(stream => promisifyStream(stream))\n  .then(() => docker.image.get('ubuntu').status())\n  .then(image => image.history())\n  .then(events => console.log(events))\n  .catch(error => console.log(error))\n```\n\n### Fetch events from docker\n\n``` js\n'use strict'\nconst fs = require('fs');\nconst {Docker} = require('node-docker-api');\n\nconst promisifyStream = stream => new Promise((resolve, reject) => {\n    stream.on('data', data => console.log(data.toString()))\n    stream.on('end', resolve)\n    stream.on('error', reject)\n})\n\nconst docker = new Docker({ socketPath: '/var/run/docker.sock' })\n\ndocker.events({\n    since: ((new Date().getTime() / 1000) - 60).toFixed(0)\n})\n  .then(stream => promisifyStream(stream))\n  .catch(error => console.log(error))\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/AgustinCB/docker-api.git"
  },
  "scripts": {
    "build": "tsc --outDir lib",
    "gendoc": "typedoc --out docs src",
    "lint": "./node_modules/tslint/bin/tslint -c tslint.json 'src/**/*.ts'",
    "test": "chmod +x test.sh; ./test.sh",
    "watch-test": "nodemon --watch build --watch test --exec 'npm run test'"
  },
  "typings": "./lib/docker",
  "version": "1.1.22"
}
